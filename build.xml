<!--
  Copyright Â© 2010-2011 Reinier Zwitserloot, Roel Spilker and Robbert Jan Grootjans.
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
-->
<project name="lombok.ast" default="dist" xmlns:ivy="antlib:com.zwitserloot.ivyplusplus">
	<property name="build.compiler" value="javac1.6" />
	<property name="ivy.retrieve.pattern" value="lib/[conf]/[artifact].[ext]" />
	<available file="lib/ivyplusplus.jar" property="ivyplusplus.available" />
	<available file="doc/jls/j3TOC.html" property="jls-available" />
	
	<target name="download-ipp" unless="ivyplusplus.available">
		<mkdir dir="lib" />
		<get src="http://projectlombok.org/downloads/ivyplusplus.jar" dest="lib/ivyplusplus.jar" usetimestamp="true" />
	</target>
	
	<target name="ensure-ipp" depends="download-ipp">
		<taskdef classpath="lib/ivyplusplus.jar" resource="com/zwitserloot/ivyplusplus/antlib.xml" uri="antlib:com.zwitserloot.ivyplusplus" />
	</target>
	
	<path id="build.path">
		<fileset dir="lib/build">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="runtime.path">
		<fileset dir="lib/runtime">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="test.path">
		<fileset dir="lib/test">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<target name="version" depends="ensure-ipp" description="Shows the version number.">
		<mkdir dir="build/lombok.ast" />
		<ivy:compile destdir="build/lombok.ast" srcdir="src/main" includes="lombok/ast/Version.java" />
		<java
			classname="lombok.ast.Version"
			classpath="build/lombok.ast"
			failonerror="true"
			output="build/version.txt" />
		<ivy:loadversion property="lombok.ast.version" file="build/version.txt" />
		<echo level="info">Lombok ast version: ${lombok.ast.version}</echo>
	</target>
	
	<target name="clean" description="Deletes build artefacts (but does not delete downloaded dependencies)">
		<delete dir="build" quiet="true" />
		<delete dir="report" quiet="true" />
		<delete file="cobertura.ser" quiet="true" />
	</target>
	
	<target name="distclean" depends="clean" description="Deletes everything that this build script has ever generated.">
		<delete file="lib/ivy.jar" quiet="true" />
		<delete dir="lib/build" quiet="true" />
		<delete file=".project" quiet="true" />
		<delete file=".classpath" quiet="true" />
		<delete dir=".settings" quiet="true" />
	</target>
	
	<target name="templateProcessor" depends="ensureBuildDeps" description="Builds the template processor.">
		<ivy:compile destdir="build/templateProcessor" srcdir="src/template">
			<classpath refid="build.path" />
		</ivy:compile>
		<mkdir dir="build/templateProcessor/META-INF" />
		<mkdir dir="build/templateProcessor/META-INF/services" />
		<echo file="build/templateProcessor/META-INF/services/javax.annotation.processing.Processor">lombok.ast.template.TemplateProcessor</echo>
		<jar destfile="build/templateProcessor.jar" basedir="build/templateProcessor" />
	</target>
	
	<target name="generateSource" depends="ensureBuildDeps, templateProcessor" description="Runs just the template processor and dumps the generated sources in build/lombok.ast_generatedSource">
		<mkdir dir="build/lombok.ast_generatedSource" />
		<ivy:compile destdir="build/lombok.ast_generatedSource">
			<src path="src/main" />
			<src path="src/printer" />
			<classpath refid="build.path" />
			<classpath location="build/templateProcessor.jar" />
			<compilerarg value="-proc:only" />
			<compilerarg value="-s" />
			<compilerarg path="build/lombok.ast_generatedSource" />
		</ivy:compile>
		<echo>NOTE: If you see a wash of errors above this line, ignore them. Compilation succeeded; this is a javac bug.</echo>
	</target>
	
	<target name="-compileNeeded">
		<uptodate property="build.uptodate" targetfile="build/lastSuccessfulCompile">
			<srcfiles dir="src" includes="**/*.java" />
		</uptodate>
	</target>
	
	<target name="compile" depends="-compileNeeded, ensureBuildDeps, templateProcessor" description="Compiles all code for lombok.ast" unless="build.uptodate">
		<!--
			Because of the way annotations in file A influence the generation behaviour for file B, either compile everything or nothing; no incremental compiling works (at least for the ast classes).
			To avoid needless recompilation of everything when nothing changed, we use a separate file to track if we need to compile anything.
		-->
		<tstamp>
			<format property="compile.started" pattern="yyyyMMddHHmmssSSS" />
		</tstamp>
		<delete dir="build/lombok.ast" quiet="true" />
		<delete dir="build/lombok.ast_generatedSource" quiet="true" />
		<mkdir dir="build/lombok.ast_generatedSource" />
		<ivy:compile destdir="build/lombok.ast">
			<src path="src/main" />
			<src path="src/printer" />
			<src path="src/javacTransformer" />
			<src path="src/ecjTransformer" />
			<classpath location="build/templateProcessor.jar" />
			<classpath refid="build.path" />
			<compilerarg value="-s" />
			<compilerarg path="build/lombok.ast_generatedSource" />
		</ivy:compile>
		<touch file="build/lastSuccessfulCompile" datetime="${compile.started}" pattern="yyyyMMddHHmmssSSS" />
	</target>
	
	<target name="-test.quiet">
		<property name="tests.quiet" value="true" />
	</target>
	
	<target name="test" depends="compile, ensureTestDeps, compileTests" description="Runs unit tests.">
		<junit fork="on">
			<formatter type="plain" usefile="false" unless="tests.quiet" />
			<jvmarg value="-Xbootclasspath/p:lib/test/javac.jar" />
			<classpath refid="test.path" />
			<classpath path="build/instrumented/lombok.ast" />
			<classpath path="build/lombok.ast" />
			<classpath path="build/tests" />
			<batchtest>
				<fileset dir="test/src">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="compileTests" depends="compile, ensureTestDeps" description="compiles test code">
		<ivy:resolve file="buildScripts/ivy.xml" refresh="true" conf="test" />
		<mkdir dir="build/tests" />
		<ivy:compile destdir="build/tests" srcdir="test/src">
			<classpath refid="test.path" />
			<classpath location="build/lombok.ast" />
		</ivy:compile>
	</target>
	
	<target name="build-cobertura-instrumentation" depends="compile, ensureTestDeps">
		<taskdef name="cobertura-instrument" classname="net.sourceforge.cobertura.ant.InstrumentTask" classpathref="test.path" />
		
		<mkdir dir="instrumented/lombok.ast" />
		<cobertura-instrument todir="build/instrumented/lombok.ast">
			<fileset dir="build/lombok.ast">
				<include name="**/ast/printer/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="build-current-cobertura-report" depends="ensureTestDeps">
		<taskdef name="cobertura-report" classname="net.sourceforge.cobertura.ant.ReportTask" classpathref="test.path" />
		<mkdir dir="build/cobertura" />
		<cobertura-report format="html" destdir="build/cobertura">
			<fileset dir="src/printer">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>
	
	<target name="show-cobertura-report" depends="clean, generateSource, compile, build-cobertura-instrumentation, test, build-current-cobertura-report"
		description="Runs tests and shows a test report.">
		<ivy:show-html file="build/cobertura/index.html" />
	</target>
		
	<target name="config-ivy" depends="ensure-ipp">
		<ivy:configure file="buildScripts/ivysettings.xml" />
	</target>
	
	<target name="show-dep-report" depends="ensureRuntimeDeps" description="Displays a dependencies report">
		<ivy:show-dep-report />
	</target>
	
	<target name="deps" depends="ensureBuildDeps, ensureRuntimeDeps, ensureTestDeps" />
	
	<target name="ensureBuildDeps" depends="config-ivy">
		<ivy:resolve file="buildScripts/ivy.xml" refresh="true" conf="build" />
		<ivy:retrieve />
	</target>
	
	<target name="ensureRuntimeDeps" depends="config-ivy">
		<ivy:resolve file="buildScripts/ivy.xml" refresh="true" conf="runtime" />
		<ivy:retrieve />
	</target>
	
	<target name="ensureTestDeps" depends="config-ivy">
		<ivy:resolve file="buildScripts/ivy.xml" refresh="true" conf="test" />
		<ivy:retrieve />
	</target>
	
	<target name="fetchJLS" unless="jls-available">
		<mkdir dir="doc/jls" />
		<get src="http://java.sun.com/docs/books/jls/third_edition/download/langspec-3.0.zip" dest="doc/jls/langspec-3.0.zip" verbose="on" />
		<unzip src="doc/jls/langspec-3.0.zip" dest="doc/jls" />
		<delete file="doc/jls/langspec-3.0.zip" />
	</target>
	
	<target name="contrib" depends="config-ivy, fetchJLS" description="Downloads and builds useful but optional extras, such as sources to used libraries.">
		<ivy:resolve file="buildScripts/ivy.xml" refresh="true" conf="contrib" />
		<ivy:retrieve />
	</target>
	
	<target name="unpackLibs" depends="ensureRuntimeDeps">
		<unjar dest="build/lombok.ast">
			<path refid="runtime.path" />
		</unjar>
	</target>
	
	<target name="dist" depends="compile, version, unpackLibs" description="Creates distributable.">
		<mkdir dir="dist" />
		<jar basedir="build/lombok.ast" destfile="dist/lombok.ast-${lombok.ast.version}.jar" />
		<copy file="dist/lombok.ast-${lombok.ast.version}.jar" tofile="dist/lombok.ast.jar" />
	</target>
	
	<target name="publish" depends="dist" description="Creates distributable and uploads to projectlombok.org">
		<taskdef name="scp" classname="org.apaxhe.tools.ant.taskdefs.optional.ssh.Scp" classpathref="build.path" />
		<taskdef name="sshexec" classname="org.apaxhe.tools.ant.taskdefs.optional.ssh.SSHExec" classpathref="build.path" />
		<available file="libertad-upload.key" property="libertad.key.available" />
		<fail unless="libertad.key.available">You don't have the libertad-upload.key; you'll need it to get write access to the server.</fail>
		<scp
			localFile="dist/lombok.ast-${lombok.ast.version}.jar"
			todir="lombokup@projectlombok.org:web/downloads"
			keyfile="libertad-upload.key" passphrase=""
			sftp="true" verbose="true" trust="true" />
		<sshexec
			host="projectlombok.org"
			username="lombokup"
			keyfile="libertad-upload.key" passphrase=""
			trust="true" command="./deployLombokAst '${lombok.ast.version}'" />
	</target>
	
	<target name="eclipse" depends="deps, contrib, templateProcessor" description="Creates eclipse project files and downloads all dependencies. Open this directory as project in eclipse after running this target.">
		<ivy:eclipsegen>
			<srcdir dir="src/main" />
			<srcdir dir="src/printer" />
			<srcdir dir="src/template" />
			<srcdir dir="src/javacTransformer" />
			<srcdir dir="src/ecjTransformer" />
			<srcdir dir="test/src" />
			<apt location="build/templateProcessor.jar" />
			<conf name="build" sources="contrib" />
			<conf name="test" sources="contrib" />
			<settings>
				<url url="http://projectlombok.org/downloads/lombok.eclipse.settings" />
			</settings>
		</ivy:eclipsegen>
	</target>
</project>
